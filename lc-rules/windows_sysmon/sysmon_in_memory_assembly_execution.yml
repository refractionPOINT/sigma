detect:
  log type: wel
  op: and
  rules:
  - case sensitive: false
    op: is
    path: Event/System/EventID
    value: '10'
  - op: or
    rules:
    - op: or
      rules:
      - case sensitive: false
        op: matches
        path: Event/EventData/CallTrace
        re: C\:\\Windows\\SYSTEM32\\ntdll\.dll\+.*\|C\:\\Windows\\System32\\KERNELBASE\.dll\+.*\|UNKNOWN\(.*\)
      - case sensitive: false
        op: matches
        path: Event/EventData/CallTrace
        re: .*UNKNOWN\(.*\)\|UNKNOWN\(.*\)
    - op: and
      rules:
      - case sensitive: false
        op: contains
        path: Event/EventData/CallTrace
        value: UNKNOWN
      - op: or
        rules:
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1F0FFF'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1F1FFF'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x143A'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1410'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1010'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1F2FFF'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1F3FFF'
        - case sensitive: false
          op: is
          path: Event/EventData/GrantedAccess
          value: '0x1FFFFF'
  target: log
respond:
- action: report
  metadata:
    author: Perez Diego (@darkquassar), oscd.community
    description: Detects the access to processes by other suspicious processes which
      have reflectively loaded libraries in their memory space. An example is SilentTrinity
      C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a
      stack call to a dll loaded from disk (the standard way), it will display "UNKNOWN"
      as the module name. Usually this means the stack call points to a module that
      was reflectively loaded in memory. Adding to this, it is not common to see such
      few calls in the stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially
      means that most of the functions required by the process to execute certain
      routines are already present in memory, not requiring any calls to external
      libraries. The latter should also be considered suspicious.
    falsepositives:
    - Low
    level: critical
    references:
    - https://azure.microsoft.com/en-ca/blog/detecting-in-memory-attacks-with-sysmon-and-azure-security-center/
    tags:
    - attack.privilege_escalation
    - attack.t1055
  name: Suspicious In-Memory Module Execution

